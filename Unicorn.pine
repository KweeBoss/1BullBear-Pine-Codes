// This work is licensed under a Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0) https://creativecommons.org/licenses/by-nc-sa/4.0/
// © KweeBoss_
// Attribution @LuxAlgo & @TradingView

//@version=5
indicator("1BullBear® - Unicorn Indicator", shorttitle="1BullBear® - Unicorn", overlay = true, max_bars_back = 500, max_lines_count  = 500)
import TradingView/TechnicalRating/1 as tr
[ratingTotal, _, _] = tr.calcRatingAll()

//-----------------------------------------------------------------------------
//CONSTANTS
//-----------------------------------------------------------------------------
color TRANS_COLOR   = #00000000

//Tooltips
string MODE_TOOLTIP = 'Allows to display historical Structure or only the recent ones'

//------------------------------------------------------------------------------
//SETTING INPUTS
//------------------------------------------------------------------------------

//---SESSIONS---
// Tokyo Session
show_asian          = input(true, '', inline = 'asian', group = 'Sessions (Session City  Regional Times)')
asian_txt           = input('Tokyo', '', inline = 'asian', group = 'Sessions (Session City  Regional Times)')
asian_time          = input.session('0900-1600', '', inline = 'asian', group = 'Sessions (Session City  Regional Times)')
asian_color         = input.color(#EF5350, '', inline = 'asian', group = 'Sessions (Session City  Regional Times)')

// London Session
show_london         = input(true, '', inline = 'london', group = 'Sessions (Session City  Regional Times)')
london_txt          = input('London', '', inline = 'london', group = 'Sessions (Session City  Regional Times)')
london_time         = input.session('0800-1100', '', inline = 'london', group = 'Sessions (Session City  Regional Times)')
london_color        = input.color(#5DADE2, '', inline = 'london', group = 'Sessions (Session City  Regional Times)')

// New York Session
show_newyork        = input(true, '', inline = 'newyork', group = 'Sessions (Session City  Regional Times)')
newyork_txt         = input('New York', '', inline = 'newyork', group = 'Sessions (Session City  Regional Times)')
newyork_time        = input.session('0800-1100', '', inline = 'newyork', group = 'Sessions (Session City  Regional Times)')
newyork_color       = input.color(#F1C40F, '', inline = 'newyork', group = 'Sessions (Session City  Regional Times)')

// Sessions         - Background, Range , Label, Transparency
session_range       = input(true, 'Session Background', inline = 'range', group = 'Sessions (Session City  Regional Times)')
show_outline        = input(true, 'Outline', inline = 'range',group = 'Sessions (Session City  Regional Times)')
show_session_txt    = input(true, 'Label', inline = 'range',group = 'Sessions (Session City  Regional Times)')
bg_transp           = input.float(90, 'Range Area Transparency', group = 'Sessions (Session City  Regional Times)')

// Dashboard 
show_dash           = input(false, 'Dashboard', inline = 'dash',group   = 'Dashboard')
dash_size           = input.string('Small', '', inline = 'dash',options = ['Small', 'Normal'], group   = 'Dashboard')


// --- HELPERS ---
// Fractals
show_fractals       = input(false, 'Fractals', inline = 'fractals',group = 'Helpers')
// Day Divider
show_day_div        = input(true, 'Daily Divider', group = 'Helpers')
show_zigzag_div     = input(true, 'Impulsive/ Corrective', group = 'Helpers')
// Previous Day High/Low - pdhl
show_pdhl           = input(true, 'PDHL', inline = 'pdhl', group = 'Helpers')
pdhl_style          = input.string('····', '', options = ['⎯⎯⎯', '----', '····'], inline = 'pdhl', group = 'Helpers')
pdhl_color          = input(#f9681a, '', inline = 'pdhl', group = 'Helpers')

// Previous Week High/Low - pwhl
show_pwhl           = input(false, 'PWHL', inline = 'pwhl ', group = 'Helpers')
pwhl_style          = input.string('····', '', options = ['⎯⎯⎯', '----', '····'], inline = 'pwhl ', group = 'Helpers')
pwhl_color          = input(#00bcd4, '', inline = 'pwhl ', group = 'Helpers')

// Previous Month High/Low - pmhl
show_pmhl           = input(false, 'PMHL', inline = 'pmhl', group = 'Helpers')
pmhl_style          = input.string('····', '', options = ['⎯⎯⎯', '----', '····'], inline = 'pmhl', group = 'Helpers')
pmhl_color          = input(#801922, '', inline = 'pmhl', group = 'Helpers')

// New York Open Level
show_ny_open        = input(false, 'NYOL', inline = 'nyop', group = 'Helpers')
ny_open_style       = input.string('····', '', options = ['⎯⎯⎯', '----', '····'], inline = 'nyop', group = 'Helpers')
ny_open_color       = input(#e91e63, '', inline = 'nyop', group = 'Helpers')


//Swing High Low Liquidity
swing_liquidity     = input(false, 'Swing Liquidity' , inline = 'swing', group = 'Swing Liquidity')
swing_label         = input.string('Small', 'Labels', inline = 'swing',options = ['Tiny', 'Small', 'Normal'], group = 'Swing Liquidity')
swing_top_line      = input(color.red,  'Swing Top   '                   , inline = 'swing_top', group = 'Swing Liquidity')
swing_top_area      = input(color.new(color.red, 50), 'Area', inline = 'swing_top', group = 'Swing Liquidity')
swing_btm_line      = input(color.teal, 'Swing Low'                   , inline = 'swing_btm', group = 'Swing Liquidity')
swing_btm_area      = input(color.new(color.teal, 50), 'Area', inline = 'swing_btm', group = 'Swing Liquidity')

//------------------------------------------------------------------------------
//VARIABLES
//------------------------------------------------------------------------------

//---Conditional Variables---



//---Bar Variables---
n               = bar_index
tf              = timeframe.period
day             = dayofweek
pivot_length    = 14
filterValue     = 0.00
is_asian        = math.sign(nz(time(tf, asian_time,   "Asia/Tokyo")))
is_london       = math.sign(nz(time(tf, london_time,  "Europe/London")))
is_newyork      = math.sign(nz(time(tf, newyork_time, "America/New_York")))



//------------------------------------------------------------------------------
//FUNCTIONS
//------------------------------------------------------------------------------

//---Utility Functions---
oc()                  => [open, close]
oc(bar)               => [open[bar], close[bar]]
hl()                  => [high, low]
hl(bar)               => [high[bar], low[bar]]  
ohlc()                => [open, high, low, close]
hlv()                 => [high, low, volume]
get_line_style(style) =>
    out = switch style
        '⎯⎯⎯' => line.style_solid
        '----'  => line.style_dashed
        '····'  => line.style_dotted

//---Computational Functions---

//Fractals 
var ftop = false
var fbot = false
if show_fractals
    
    ftop:= high[4] < high[2] and high[3] <= high[2] and high[2] >= high[1] and high[2] > high[0]
    fbot := low[4] > low[2] and low[3] >= low[2] and low[2] <= low[1] and low[2] < low[0]

plotshape(ftop, title='Top Fractals', style=shape.triangledown, size=size.tiny,location=location.abovebar, color=color.rgb(224, 224, 224), offset=-2)
plotshape(fbot, title='Bottom Fractals', style=shape.triangleup, size=size.tiny, location=location.belowbar, color=color.rgb(224, 224, 224), offset=-2)


//Session Function {
_f_session(is_session, session_name, session_color)=>
    var s_time        = 0 // Session Start Time
    var s_max         = high
    var s_min         = low
    var box s_box     = na
    var line s_high   = na
    var line s_low    = na
    var label s_label = na

    //New Session Start
    if is_session == 1 and is_session != is_session[1]
        s_time  := time
        s_max   := high
        s_min   := low

        //Create new session box
        s_box   := box.new(n, s_max, n, s_min
          , bgcolor = color.new(session_color, bg_transp)
          , border_color = na)

        //Create new session high/low lines
        s_high  := line.new(s_time, s_max, s_time, s_max
          , xloc = xloc.bar_time
          , color = session_color
          , width = 1
          , extend = extend.none)
        s_low   := line.new(s_time, s_min, s_time, s_min
          , xloc = xloc.bar_time
          , color = session_color
          , width = 1
          , extend = extend.none)

        //Create new session label
        if show_session_txt
            s_label := label.new(s_time, s_max, session_name
              , xloc = xloc.bar_time
              , textcolor = session_color
              , style = label.style_label_down
              , color = color.new(color.white, 100)
              , size = size.small)

    //During Session
    if is_session  == 1 and is_session == is_session[1]
      
        s_max := math.max(high, s_max)
        s_min := math.min(low, s_min)

        box.set_top(s_box, s_max)
        box.set_rightbottom(s_box, n, s_min)

        line.set_xy1(s_high, s_time,s_max )
        line.set_xy1(s_low, s_time,s_min )
        line.set_xy2(s_high, time,s_max )
        line.set_xy2(s_low, time,s_min )

        if show_session_txt
            label.set_xy(s_label, int(math.avg(s_time, time)), s_max)
//---Helpers Functions---
//Day Divider Function
if show_day_div
    if day != day[1]
        line.new(n, close + syminfo.mintick, n, close - syminfo.mintick, color  = color.gray, extend = extend.both, style  = line.style_dotted)

//Previous High/Low Function
_f_previous_high_low(h, l, tf, _f_linestyle, _f_color)=>
    
    var line high_line = line.new(na,na,na,na
      , xloc = xloc.bar_time
      , color = _f_color
      , style = get_line_style(_f_linestyle))

    var label high_lbl = label.new(na,na
      , xloc = xloc.bar_time
      , text = str.format('P{0}H', tf)
      , color = TRANS_COLOR
      , textcolor = _f_color, size = size.small
      , style = label.style_label_left)

    var line low_line = line.new(na,na,na,na
      , xloc = xloc.bar_time, color = _f_color
      , style = get_line_style(_f_linestyle))

    var label low_lbl = label.new(na,na
      , xloc = xloc.bar_time
      , text = str.format('P{0}L', tf)
      , color = TRANS_COLOR, textcolor = _f_color
      , size = size.small, style = label.style_label_left)
    
    //Get Previous High/Low
    hy = ta.valuewhen(h != h[1], h, 1)
    hx = ta.valuewhen(h == high, time, 1)
    ly = ta.valuewhen(l != l[1], l, 1)
    lx = ta.valuewhen(l == low, time, 1)
    
    //Draw only at the last bar
    if barstate.islast
        ext = time + (time - time[1])*20
        //High
        line.set_xy1(high_line, hx, hy)
        line.set_xy2(high_line, ext, hy)
        label.set_xy(high_lbl, ext, hy)
        //Low
        line.set_xy1(low_line, lx, ly)
        line.set_xy2(low_line, ext, ly)
        label.set_xy(low_lbl, ext, ly)

//New York Open Level Function
_f_newyork_open(_f_linestyle, _f_color) =>
    
    var line nyop_line = line.new(na,na,na,na, xloc = xloc.bar_time, color = _f_color, style = get_line_style(_f_linestyle))
    var label nyop_lbl = label.new(na,na,"NYOP", xloc = xloc.bar_time, color = TRANS_COLOR, textcolor = _f_color, size = size.small, style = label.style_label_left)
    var float nyop_price = 0.00

    //Get New York Open Time
    nyx = ta.valuewhen(hour(time,"America/New_York" ) == 0 and minute(time,"America/New_York" ) == 0, time, 0)
    
    //Set New York Open Price
    if hour(time,"America/New_York" ) == 0 and minute(time,"America/New_York" ) == 0
        nyop_price := open
    
    //Draw only at the last bar
    if barstate.islast and day != day[1]
        ext = time + (time - time[1])*20 
        
        line.set_xy1(nyop_line, nyx, nyop_price)
        line.set_xy2(nyop_line, ext, nyop_price)
        label.set_xy(nyop_lbl, ext, nyop_price)

// -- Pivot High & Low

//Get Swing High Low Liquidity Functions
get_counts(condition, top, btm)=>
    var vol = 0.
    if condition
        vol := 0.
    else
        vol += low[pivot_length] < top and high[pivot_length] > btm ? volume[pivot_length] : 0

    vol

//Set Swing High Low Liquidity Functions
set_label(vol, x, y, css, lbl_style)=>
    var label lbl = na
    var label_size = switch swing_label
        'Tiny' => size.tiny
        'Small' => size.small
        'Normal' => size.normal

    target = vol

    if ta.crossover(target, filterValue)
        lbl := label.new(x, y, str.tostring(vol, format.volume)
          , style = lbl_style
          , size = label_size
          , color = #00000000
          , textcolor = css)

    if target > filterValue
        label.set_text(lbl, str.tostring(vol, format.volume))
set_level(condition, crossed, value, vol, css)=>
    var line lvl = na

    target = vol

    if condition
        if target[1] < filterValue[1]
            line.delete(lvl[1])
        else if not crossed[1]
            line.set_x2(lvl, n - pivot_length)

        lvl := line.new(n - pivot_length, value, n, value
          , color = na)

    if not crossed[1]
        line.set_x2(lvl, n+3)
    
    if crossed and not crossed[1]
        line.set_x2(lvl, n)
        line.set_style(lvl, line.style_dashed)

    if target > filterValue
        line.set_color(lvl, css)

set_zone(condition, x, top, btm, vol, css)=>
    var box bx = na

    target = vol

    if ta.crossover(target, filterValue)
        bx := box.new(x, top, x , btm
          , border_color = na
          , bgcolor = css)
    
    if target > filterValue
        box.set_right(bx, x )

//Pivot high
var float ph_top = na
var float ph_btm = na
var bool  ph_crossed = na
var       ph_x1 = 0
var box   ph_bx = box.new(na,na,na,na, bgcolor = color.new(swing_top_area, 80), border_color = na)

ph = ta.pivothigh(pivot_length, pivot_length)
ph_vol = get_counts(ph, ph_top, ph_btm)

if ph and swing_liquidity 
    ph_top := high[pivot_length]
    ph_btm := math.max(close[pivot_length], open[pivot_length])   
    ph_x1 := n - pivot_length
    ph_crossed := false

    box.set_lefttop(ph_bx, ph_x1, ph_top)
    box.set_rightbottom(ph_bx, ph_x1, ph_btm)
else
    ph_crossed := close > ph_top ? true : ph_crossed
    
    if ph_crossed
        box.set_right(ph_bx, ph_x1)
    else
        box.set_right(ph_bx, n+3)

//Pivot low
var float pl_top = na
var float pl_btm = na
var bool  pl_crossed = na
var       pl_x1 = 0
var box   pl_bx = box.new(na,na,na,na, bgcolor = color.new(swing_btm_area, 80), border_color = na)

pl = ta.pivotlow(pivot_length, pivot_length)
pl_vol = get_counts(pl, pl_top, pl_btm)

if pl and swing_liquidity 
    pl_top := math.min(close[pivot_length], open[pivot_length])
    pl_btm := low[pivot_length]
    
    pl_x1 := n - pivot_length
    pl_crossed := false
    
    box.set_lefttop(pl_bx, pl_x1, pl_top)
    box.set_rightbottom(pl_bx, pl_x1, pl_btm)
else
    pl_crossed := close < pl_btm ? true : pl_crossed

    if pl_crossed
        box.set_right(pl_bx, pl_x1)
    else
        box.set_right(pl_bx, n+3)
// Display liquidity high levels/blocks
if swing_liquidity 
    set_zone(ph, ph_x1, ph_top, ph_btm, ph_vol, swing_top_area)
    set_level(ph, ph_crossed, ph_top, ph_vol, swing_top_line)
    set_label(ph_vol, ph_x1, ph_top, swing_top_line, label.style_label_down)
    set_zone(pl, pl_x1, pl_top, pl_btm, pl_vol, swing_btm_area)
    set_level(pl, pl_crossed, pl_btm, pl_vol, swing_btm_line)
    set_label(pl_vol, pl_x1, pl_btm, swing_btm_line, label.style_label_up)
 


//------------------------------------------------------------------------------
//PLOTS
//------------------------------------------------------------------------------

//---SESSIONS---
if show_asian 
    _f_session(is_asian, asian_txt, asian_color)

if show_london 
    _f_session(is_london, london_txt, london_color)

if show_newyork 
    _f_session(is_newyork, newyork_txt, newyork_color)

//---DASHBOARD---
if  show_dash
    ta_rating = tr.ratingStatus(ratingTotal)
    ta_color =  color.black
    if ta_rating == 'Strong\nBuy '
        ta_rating := 'Momentum 🔋 STRONG BUY'
        ta_color := color.new(#229954, 0)
    else if ta_rating == 'Strong\nSell'
        ta_rating := 'Momentum 🪫 STRONG SELL'
        ta_color := color.new(#F44336, 0)
    else if ta_rating == 'Neutral'
        ta_rating := 'Momentum ⚪ NEUTRAL'
        ta_color := color.new(#D7DBDD, 0)
    else if ta_rating == 'Buy'
        ta_rating := 'Momentum 🟢 BUY'
        ta_color := color.new(#58D68D, 0)
    else if ta_rating == 'Sell'
        ta_rating := 'Momentum 🔴 SELL'
        ta_color := color.new(#EC7063, 0)

    var table infoBox = table.new(position.top_right, 1, 1)
    if barstate.isfirst
        table.cell(infoBox, 0, 0, "", text_color = chart.fg_color)
    else if barstate.islast
        table.cell_set_text(infoBox, 0, 0, ta_rating)
        table.cell_set_text_color(infoBox, 0, 0, ta_color)
//---STRUCTURE---

//---LIQUIDITY---

//---POINT OF INTEREST- --

//---HELPERS---

//Day Dividers {
plotshape(day != day[1] and day == 1 and show_day_div, "Sunday", shape.labelup, location.bottom, na, text = "SUN", textcolor = color.gray, size = size.tiny, display = display.all - display.status_line, editable = false)
plotshape(day != day[1] and day == 2 and show_day_div, "Monday", shape.labelup, location.bottom, na, text = "MON", textcolor = color.gray, size = size.tiny, display = display.all - display.status_line, editable = false)
plotshape(day != day[1] and day == 3 and show_day_div, "Tuesday", shape.labelup, location.bottom, na, text = "TUE", textcolor = color.gray, size = size.tiny, display = display.all - display.status_line, editable = false)
plotshape(day != day[1] and day == 4 and show_day_div, "Wednesay", shape.labelup, location.bottom, na, text = "WED", textcolor = color.gray, size = size.tiny, display = display.all - display.status_line, editable = false)
plotshape(day != day[1] and day == 5 and show_day_div, "Thursday", shape.labelup, location.bottom, na, text = "THU", textcolor = color.gray, size = size.tiny, display = display.all - display.status_line, editable = false)
plotshape(day != day[1] and day == 6 and show_day_div, "Friday", shape.labelup, location.bottom, na, text = "FRI", textcolor = color.gray, size = size.tiny, display = display.all - display.status_line, editable = false)
plotshape(day != day[1] and day == 7 and show_day_div, "Saturday", shape.labelup, location.bottom, na, text = "SAT", textcolor = color.gray, size = size.tiny, display = display.all - display.status_line, editable = false)

//Previous Day High/Low - pdhl
[pdh, pdl] = request.security(syminfo.tickerid, 'D', hl(), lookahead = barmerge.lookahead_on)
if show_pdhl
    _f_previous_high_low(pdh, pdl, 'D', pdhl_style, pdhl_color)

//Previous Week High/Low - pwhl
[pwh, pwl] = request.security(syminfo.tickerid, 'W', hl(), lookahead = barmerge.lookahead_on)
if show_pwhl
    _f_previous_high_low(pwh, pwl, 'W', pwhl_style, pwhl_color)

//Previous Month High/Low - pdhl
[pmh, pml] = request.security(syminfo.tickerid, 'M', hl(), lookahead = barmerge.lookahead_on)
if show_pmhl
    _f_previous_high_low(pmh, pml, 'M', pmhl_style, pmhl_color)

//New York Open Level - nyol
if show_ny_open
    _f_newyork_open(ny_open_style, ny_open_color)

